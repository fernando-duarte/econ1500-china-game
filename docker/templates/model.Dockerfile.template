# Base Python Model Dockerfile Template
# Auto-generated from template - DO NOT EDIT DIRECTLY
ARG PYTHON_VERSION=${PYTHON_VERSION}
FROM python:${PYTHON_VERSION}-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ${SYSTEM_DEPENDENCIES} \
    && rm -rf /var/lib/apt/lists/*

# User setup (optional for development)
ARG CREATE_USER=${CREATE_USER}
RUN if [ "$CREATE_USER" = "true" ]; then \
    groupadd -r appuser && useradd -r -g appuser appuser; \
    fi

# Python environment setup
ARG USE_VENV=${USE_VENV}
RUN if [ "$USE_VENV" = "true" ]; then \
    python -m venv .venv && \
    echo 'PATH="/app/.venv/bin:$PATH"' >> /etc/environment; \
    fi
ENV PATH="/app/.venv/bin:$PATH"

# Copy requirements
COPY ${REQUIREMENTS_PATH}/requirements.txt .
COPY ${REQUIREMENTS_PATH}/requirements.lock .

# Install dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.lock

# Copy application code
COPY ${APP_PATH} .

# Set permissions if using non-root user
RUN if [ "$CREATE_USER" = "true" ]; then \
    chown -R appuser:appuser /app && \
    USER appuser; \
    fi

# Expose port
EXPOSE ${PORT}

# Health check
ARG INCLUDE_HEALTHCHECK=${INCLUDE_HEALTHCHECK}
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:${PORT}/health || exit 1

# Start command
CMD ${START_COMMAND}
